Instapost CAP tradeoff

В данной системе надо исходить из того, что чужие посты смотрятся часто, а свои постятся
горадно реже.

=====================================================
Consistency.

Какой уровень консистентности на самом деле нужен?
Кажется, что если 2 пользователя из разных уголков мира одновременно видят 1 и тот же пост в разном состоянии - это терпимо. Но при попытке записи стоит взять "настоящее" состояние поста, потому что в общем случае нельзя смержить результаты. Если кто-то не видит самое свежее состояние ленты другого пользователя - это тоже терпимо. Особенно если речь идет про разные континенты. Но лучше предупреждать в таком случае, что что-то не так.
=====================================================
Availability.

Если пользователю недоступен ресурс - это очень плохо.
К счастью, речь идет про некую социальную сеть. Если пользователь 2 часа не может зайти в социальную сеть, он с нее вряд ли уйдет - у него здесь уже есть "якорь" в виде постов (, подписок/друзей и прочего нереализованного в данном API).
И все же стоит отметить, что соцсети предпочитают доступность консистентности, как показывает практика.
=====================================================
Partition tolerance.

Само собой, мне сейчас он не нужен :)
Но речь идет вроде о суперраспределенных системах с серверами во всех уголках мира, так
что этот пункт by definition должен выполняться.
=====================================================

Если верить интернетам, то социальные сети предпочитаю реляционные базы данных. Аргументация сложная, но если сократить до состояния "как я понял", дело в большом числе связей/отношений в системе. Лайки, комментарии, друзья и т.д. Вещи вроде join'ов становятся обыденными и желанными на этапе проектирования баз данных.
Помимо прочего, ка было замечено, соцсети предпочитают использовать AP системы.

Но я все равно хочу использовать MongoDB, потому что
1) это для меня что-то новое;
2) соцсеть упрощена до безобразия - никаких лайков, комментариев и подписок;
3) очень быстрые выполнения операций read (а в данной упрозщенной системе подразумевается огромное число read'ов по отношению к write'ам);
4) простые в использовании механизмы репликаций и шардирования. не знаю пока, придется ли конкретно в этой системе все это реализовывать для моей виртуальной машинки, но в плюсы занести все равно надо;
5) большое комьюнити, хорошая документация, хороший c++ driver